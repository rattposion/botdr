"""
Teste do Fluxo Completo de Autentica√ß√£o
Verifica integra√ß√£o entre auth_manager, token_manager, data_collector e balance_manager
"""
import asyncio
import time
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_auth_manager():
    """Testa funcionalidades do auth_manager"""
    print("\n" + "="*60)
    print("üîê TESTE DO AUTH MANAGER")
    print("="*60)
    
    try:
        from auth_manager import auth_manager
        
        # Verificar status inicial
        print(f"‚úÖ Auth manager importado com sucesso")
        print(f"üìä Status inicial: {auth_manager.get_auth_status()}")
        
        # Verificar se h√° token salvo
        if auth_manager.is_authenticated:
            print("‚úÖ Usu√°rio j√° autenticado")
            token = auth_manager.get_api_token()
            if token:
                print(f"üîë Token dispon√≠vel: {token[:10]}...{token[-10:]}")
            else:
                print("‚ùå Token n√£o dispon√≠vel")
        else:
            print("‚ö†Ô∏è Usu√°rio n√£o autenticado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no auth_manager: {e}")
        return False

def test_token_manager():
    """Testa funcionalidades do token_manager"""
    print("\n" + "="*60)
    print("üîÑ TESTE DO TOKEN MANAGER")
    print("="*60)
    
    try:
        from token_manager import token_manager
        
        print(f"‚úÖ Token manager importado com sucesso")
        
        # Verificar status
        status = token_manager.get_status()
        print(f"üìä Status: {status}")
        
        # Iniciar monitoramento
        if not status['monitoring']:
            print("üîÑ Iniciando monitoramento...")
            success = token_manager.start_monitoring()
            print(f"üìä Monitoramento iniciado: {success}")
        else:
            print("‚úÖ Monitoramento j√° ativo")
        
        # Aguardar um pouco
        time.sleep(2)
        
        # Verificar status novamente
        status = token_manager.get_status()
        print(f"üìä Status ap√≥s inicializa√ß√£o: {status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no token_manager: {e}")
        return False

def test_data_collector():
    """Testa integra√ß√£o do data_collector com auth"""
    print("\n" + "="*60)
    print("üì° TESTE DO DATA COLLECTOR")
    print("="*60)
    
    try:
        from data_collector import data_collector
        
        print(f"‚úÖ Data collector importado com sucesso")
        
        # Verificar status inicial
        print(f"üìä Conectado: {data_collector.is_connected}")
        print(f"üìä Autorizado: {data_collector.is_authorized}")
        
        # Tentar conectar
        if not data_collector.is_connected:
            print("üîÑ Conectando...")
            success = data_collector.connect()
            print(f"üìä Conex√£o: {success}")
            
            # Aguardar conex√£o
            time.sleep(3)
        
        # Tentar autorizar
        if data_collector.is_connected and not data_collector.is_authorized:
            print("üîÑ Autorizando...")
            success = data_collector.authorize()
            print(f"üìä Autoriza√ß√£o: {success}")
            
            # Aguardar autoriza√ß√£o
            time.sleep(2)
        
        print(f"üìä Status final - Conectado: {data_collector.is_connected}, Autorizado: {data_collector.is_authorized}")
        
        return data_collector.is_connected and data_collector.is_authorized
        
    except Exception as e:
        print(f"‚ùå Erro no data_collector: {e}")
        return False

async def test_balance_manager():
    """Testa funcionalidades do balance_manager"""
    print("\n" + "="*60)
    print("üí∞ TESTE DO BALANCE MANAGER")
    print("="*60)
    
    try:
        from balance_manager import balance_manager
        
        print(f"‚úÖ Balance manager importado com sucesso")
        
        # Verificar status inicial
        info = balance_manager.get_balance_info()
        print(f"üìä Info inicial: {info}")
        
        # Iniciar atualiza√ß√£o autom√°tica
        if not balance_manager.is_updating:
            print("üîÑ Iniciando atualiza√ß√£o autom√°tica...")
            balance_manager.start_auto_update()
            time.sleep(1)
        
        # For√ßar atualiza√ß√£o
        print("üîÑ For√ßando atualiza√ß√£o de saldo...")
        success = await balance_manager.update_balance()
        print(f"üìä Atualiza√ß√£o: {success}")
        
        # Verificar resultado
        info = balance_manager.get_balance_info()
        print(f"üìä Info final: {info}")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erro no balance_manager: {e}")
        return False

def test_integration():
    """Testa integra√ß√£o completa"""
    print("\n" + "="*60)
    print("üîó TESTE DE INTEGRA√á√ÉO COMPLETA")
    print("="*60)
    
    try:
        from auth_manager import auth_manager
        from token_manager import token_manager
        from data_collector import data_collector
        from balance_manager import balance_manager
        
        print("‚úÖ Todos os m√≥dulos importados")
        
        # Verificar se h√° autentica√ß√£o
        if not auth_manager.is_authenticated:
            print("‚ö†Ô∏è Usu√°rio n√£o autenticado - alguns testes podem falhar")
            print("üí° Para testar completamente, fa√ßa login primeiro no dashboard")
            return False
        
        # Verificar token
        token = auth_manager.get_api_token()
        if not token:
            print("‚ùå Token n√£o dispon√≠vel")
            return False
        
        print(f"‚úÖ Token dispon√≠vel: {token[:10]}...{token[-10:]}")
        
        # Verificar se data_collector usa o token
        if data_collector.is_connected and data_collector.is_authorized:
            print("‚úÖ Data collector conectado e autorizado")
        else:
            print("‚ö†Ô∏è Data collector n√£o est√° totalmente funcional")
        
        # Verificar balance_manager
        info = balance_manager.get_balance_info()
        if info['status'] == 'connected':
            print(f"‚úÖ Balance manager funcionando - Saldo: ${info['balance']:.2f}")
        else:
            print(f"‚ö†Ô∏è Balance manager com problemas: {info['error']}")
        
        # Verificar token_manager
        token_status = token_manager.get_status()
        if token_status['monitoring']:
            print("‚úÖ Token manager monitorando automaticamente")
        else:
            print("‚ö†Ô∏è Token manager n√£o est√° monitorando")
        
        print("\nüéâ Integra√ß√£o testada com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o: {e}")
        return False

async def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTES DO FLUXO DE AUTENTICA√á√ÉO")
    print("=" * 80)
    
    results = []
    
    # Teste 1: Auth Manager
    results.append(("Auth Manager", test_auth_manager()))
    
    # Teste 2: Token Manager
    results.append(("Token Manager", test_token_manager()))
    
    # Teste 3: Data Collector
    results.append(("Data Collector", test_data_collector()))
    
    # Teste 4: Balance Manager
    results.append(("Balance Manager", await test_balance_manager()))
    
    # Teste 5: Integra√ß√£o
    results.append(("Integra√ß√£o", test_integration()))
    
    # Resumo dos resultados
    print("\n" + "="*80)
    print("üìä RESUMO DOS TESTES")
    print("="*80)
    
    for test_name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"{test_name:20} | {status}")
    
    total_passed = sum(1 for _, success in results if success)
    total_tests = len(results)
    
    print(f"\nüìà RESULTADO FINAL: {total_passed}/{total_tests} testes passaram")
    
    if total_passed == total_tests:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema de autentica√ß√£o funcionando perfeitamente.")
    elif total_passed >= total_tests * 0.8:
        print("‚úÖ MAIORIA DOS TESTES PASSOU. Sistema funcionando com pequenos problemas.")
    else:
        print("‚ö†Ô∏è V√ÅRIOS TESTES FALHARAM. Verifique a configura√ß√£o do sistema.")
    
    print("\nüí° DICAS:")
    print("- Para funcionalidade completa, fa√ßa login no dashboard primeiro")
    print("- Verifique se o arquivo .env est√° configurado corretamente")
    print("- Certifique-se de que a conex√£o com internet est√° funcionando")

if __name__ == "__main__":
    asyncio.run(main())