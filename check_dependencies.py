#!/usr/bin/env python3
"""
Script para verificar depend√™ncias antes do deploy no Railway
"""
import sys
import subprocess
import pkg_resources
from packaging import version

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("üêç Verificando vers√£o do Python...")
    current_version = sys.version_info
    print(f"   Vers√£o atual: {current_version.major}.{current_version.minor}.{current_version.micro}")
    
    if current_version.major == 3 and current_version.minor >= 11:
        print("   ‚úÖ Vers√£o do Python compat√≠vel")
        return True
    else:
        print("   ‚ùå Vers√£o do Python incompat√≠vel (requer 3.11+)")
        return False

def check_critical_packages():
    """Verifica se os pacotes cr√≠ticos podem ser instalados"""
    print("\nüì¶ Verificando pacotes cr√≠ticos...")
    
    critical_packages = [
        'streamlit',
        'pandas', 
        'numpy',
        'lightgbm',
        'scikit-learn',
        'requests',
        'aiohttp',
        'websocket-client',
        'python-dotenv',
        'cryptography'
    ]
    
    failed_packages = []
    
    for package in critical_packages:
        try:
            pkg_resources.get_distribution(package)
            print(f"   ‚úÖ {package}")
        except pkg_resources.DistributionNotFound:
            print(f"   ‚ùå {package} n√£o encontrado")
            failed_packages.append(package)
    
    return len(failed_packages) == 0, failed_packages

def check_requirements_syntax():
    """Verifica se o requirements.txt tem sintaxe v√°lida"""
    print("\nüìÑ Verificando requirements.txt...")
    
    try:
        with open('requirements.txt', 'r') as f:
            lines = f.readlines()
        
        invalid_lines = []
        for i, line in enumerate(lines, 1):
            line = line.strip()
            if line and not line.startswith('#'):
                # Verifica√ß√£o b√°sica de sintaxe
                if '==' not in line and '>=' not in line and '<=' not in line and '>' not in line and '<' not in line:
                    if not line.replace('-', '').replace('_', '').replace('[', '').replace(']', '').isalnum():
                        invalid_lines.append((i, line))
        
        if invalid_lines:
            print("   ‚ùå Linhas com sintaxe suspeita:")
            for line_num, line in invalid_lines:
                print(f"      Linha {line_num}: {line}")
            return False
        else:
            print("   ‚úÖ Sintaxe do requirements.txt v√°lida")
            return True
            
    except FileNotFoundError:
        print("   ‚ùå requirements.txt n√£o encontrado")
        return False

def check_cryptography_compatibility():
    """Verifica especificamente a compatibilidade do cryptography"""
    print("\nüîê Verificando compatibilidade do cryptography...")
    
    try:
        import cryptography
        crypto_version = cryptography.__version__
        print(f"   Vers√£o instalada: {crypto_version}")
        
        # Verificar se √© uma vers√£o compat√≠vel
        if version.parse(crypto_version) >= version.parse("42.0.0"):
            print("   ‚úÖ Vers√£o do cryptography compat√≠vel")
            return True
        else:
            print("   ‚ö†Ô∏è Vers√£o do cryptography pode ser incompat√≠vel")
            return False
            
    except ImportError:
        print("   ‚ùå cryptography n√£o instalado")
        return False

def check_streamlit_config():
    """Verifica se a configura√ß√£o do Streamlit est√° correta"""
    print("\nüéØ Verificando configura√ß√£o do Streamlit...")
    
    try:
        import streamlit as st
        print("   ‚úÖ Streamlit importado com sucesso")
        
        # Verificar se o dashboard.py existe
        import os
        if os.path.exists('dashboard.py'):
            print("   ‚úÖ dashboard.py encontrado")
        else:
            print("   ‚ùå dashboard.py n√£o encontrado")
            return False
            
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar Streamlit: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Verifica√ß√£o de depend√™ncias para Railway Deploy")
    print("=" * 50)
    
    checks = [
        ("Python Version", check_python_version),
        ("Critical Packages", lambda: check_critical_packages()[0]),
        ("Requirements Syntax", check_requirements_syntax),
        ("Cryptography Compatibility", check_cryptography_compatibility),
        ("Streamlit Config", check_streamlit_config)
    ]
    
    results = []
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"   ‚ùå Erro durante verifica√ß√£o: {e}")
            results.append((check_name, False))
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("=" * 50)
    
    all_passed = True
    for check_name, passed in results:
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"{check_name:.<30} {status}")
        if not passed:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ TODAS AS VERIFICA√á√ïES PASSARAM!")
        print("‚úÖ Pronto para deploy no Railway!")
    else:
        print("‚ö†Ô∏è ALGUMAS VERIFICA√á√ïES FALHARAM")
        print("‚ùå Corrija os problemas antes do deploy")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)