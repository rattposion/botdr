#!/usr/bin/env python3
"""
Script de teste para verificar a conex√£o com a API Deriv
"""

import asyncio
import websockets
import json
from config import config

async def test_api_connection():
    """Testa a conex√£o com a API Deriv"""
    
    print("üîÑ Testando conex√£o com a API Deriv...")
    print(f"App ID: {config.deriv.app_id}")
    print(f"WebSocket URL: {config.deriv.websocket_url}")
    
    try:
        # Conectar ao WebSocket
        async with websockets.connect(config.deriv.websocket_url) as websocket:
            print("‚úÖ Conectado ao WebSocket!")
            
            # Teste 1: Ping
            ping_request = {
                "ping": 1,
                "req_id": 1
            }
            
            await websocket.send(json.dumps(ping_request))
            response = await websocket.recv()
            ping_data = json.loads(response)
            
            print(f"üìã Resposta do ping: {ping_data}")
            
            if "pong" in ping_data:
                print("‚úÖ Ping/Pong funcionando!")
            elif "error" in ping_data:
                print(f"‚ùå Erro no ping: {ping_data['error']}")
                return False
            else:
                print("‚ö†Ô∏è Resposta inesperada do ping, mas continuando...")
                # N√£o retornar False aqui, continuar com outros testes
            
            # Teste 2: Obter informa√ß√µes do servidor
            server_time_request = {
                "time": 1,
                "req_id": 2
            }
            
            await websocket.send(json.dumps(server_time_request))
            response = await websocket.recv()
            time_data = json.loads(response)
            
            if "time" in time_data:
                print(f"‚úÖ Hora do servidor: {time_data['time']}")
            else:
                print("‚ùå Erro ao obter hora do servidor")
                return False
            
            # Teste 3: Obter ticks (dados de mercado)
            ticks_request = {
                "ticks": "R_10",
                "subscribe": 1,
                "req_id": 3
            }
            
            await websocket.send(json.dumps(ticks_request))
            
            # Aguardar alguns ticks
            for i in range(3):
                response = await websocket.recv()
                tick_data = json.loads(response)
                
                if "tick" in tick_data:
                    tick = tick_data["tick"]
                    print(f"‚úÖ Tick {i+1}: {tick['symbol']} = {tick['quote']} (√©poca: {tick['epoch']})")
                else:
                    print(f"‚ùå Erro no tick {i+1}: {tick_data}")
            
            # Teste 4: Verificar se token est√° funcionando (se configurado)
            if config.deriv.api_token:
                print("\nüîë Testando autentica√ß√£o com token...")
                
                auth_request = {
                    "authorize": config.deriv.api_token,
                    "req_id": 4
                }
                
                await websocket.send(json.dumps(auth_request))
                response = await websocket.recv()
                auth_data = json.loads(response)
                
                if "authorize" in auth_data:
                    account_info = auth_data["authorize"]
                    print(f"‚úÖ Autenticado! Conta: {account_info.get('loginid', 'N/A')}")
                    print(f"   Moeda: {account_info.get('currency', 'N/A')}")
                    print(f"   Saldo: {account_info.get('balance', 'N/A')}")
                    print(f"   Pa√≠s: {account_info.get('country', 'N/A')}")
                else:
                    print(f"‚ùå Erro na autentica√ß√£o: {auth_data}")
                    return False
            else:
                print("‚ö†Ô∏è Token n√£o configurado - pulando teste de autentica√ß√£o")
            
            print("\nüéâ Todos os testes passaram! API funcionando corretamente.")
            return True
            
    except websockets.exceptions.ConnectionClosed as e:
        print(f"‚ùå Conex√£o fechada: {e}")
        return False
    except websockets.exceptions.InvalidURI as e:
        print(f"‚ùå URL inv√°lida: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 50)
    print("üß™ TESTE DA API DERIV")
    print("=" * 50)
    
    # Executar teste
    result = asyncio.run(test_api_connection())
    
    print("\n" + "=" * 50)
    if result:
        print("‚úÖ RESULTADO: API funcionando perfeitamente!")
        print("Voc√™ pode usar o bot com seguran√ßa.")
    else:
        print("‚ùå RESULTADO: Problemas encontrados na API.")
        print("Verifique as configura√ß√µes no arquivo .env")
        print("Consulte o arquivo SETUP_API.md para mais informa√ß√µes.")
    print("=" * 50)

if __name__ == "__main__":
    main()